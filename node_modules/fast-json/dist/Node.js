"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = void 0;
class Node {
    constructor(name, parent) {
        this.name = name;
        this.children = new Map();
        this.parent = parent;
        this.listeners = [];
    }
    createChild(name) {
        const node = new Node(name, this);
        this.children.set(name, node);
        return node;
    }
    getChild(name) {
        return this.children.get(name);
    }
    createOrGetChild(name) {
        const node = this.getChild(name);
        return node !== undefined ? node : this.createChild(name);
    }
    addListeners(listeners) {
        this.listeners = this.listeners.concat(listeners);
    }
    hasListeners() {
        return this.listeners.length > 0;
    }
    callListeners(data) {
        for (const listener of this.listeners) {
            listener(data);
        }
    }
    getPath() {
        const path = [];
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        let node = this;
        while (node.parent !== undefined) {
            path.unshift(node.name);
            node = node.parent;
        }
        return path;
    }
    clone() {
        const clone = new Node(this.name);
        clone.listeners = this.listeners.slice();
        this.children.forEach((child) => {
            const childClone = child.clone();
            clone.children.set(child.name, childClone);
            childClone.parent = clone;
        });
        return clone;
    }
}
exports.Node = Node;
