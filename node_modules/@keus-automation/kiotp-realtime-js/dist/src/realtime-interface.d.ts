/// <reference types="node" />
import { EventEmitter } from "events";
import { Buffer } from 'buffer/';
export type TMethodHandlerFunction<ReqData, RespData> = (methodData: ReqData) => Promise<RespData>;
export type TEventDataReceiveFunction<T> = (eventData: T) => Promise<void>;
export declare const ConnectionEvents: {
    CONNECTING: string;
    RECONNECTING: string;
    CONNECTED: string;
    ERROR: string;
};
export type Tconfig = {
    host: string;
    port: number;
    token?: string;
    nkey?: string;
    reconnection?: {
        maxAttempts?: number;
    };
};
export interface RPCBinaryResponse {
    success: boolean;
    data?: Buffer;
    error?: Error;
}
export interface RPCJSONResponse<JSONRespData> {
    success: boolean;
    data?: JSONRespData;
    error?: Error;
}
export interface RPCStringResponse {
    success: boolean;
    data?: string;
    error?: Error;
}
export declare namespace Errors {
    class InvalidConnection extends Error {
        constructor();
        static getErrorCode(): number;
    }
    class RPCNotAvailable extends Error {
        constructor();
        static getErrorCode(): number;
    }
    class InvalidDataFormat extends Error {
        constructor();
        static getErrorCode(): number;
    }
}
export declare abstract class IKIOTPRealtimeCommunication extends EventEmitter {
    constructor(config: Tconfig);
    abstract connect(): Promise<boolean>;
    abstract stringProvideRPC(key: string, methodHandlerFunction: TMethodHandlerFunction<string, string>): Promise<boolean>;
    abstract stringCallRPC(key: string, methodData: string): Promise<RPCStringResponse>;
    abstract jsonProvideRPC<ReqData, RespData>(key: string, methodHandlerFunction: TMethodHandlerFunction<ReqData, RespData>): Promise<boolean>;
    abstract jsonCallRPC<JSONReqData, JSONRespData>(key: string, methodData: JSONReqData): Promise<RPCJSONResponse<JSONRespData>>;
    abstract binaryProvideRPC(key: string, methodHandlerFunction: TMethodHandlerFunction<Buffer, Buffer>): Promise<boolean>;
    abstract binaryCallRPC(key: string, methodData: Buffer): Promise<RPCBinaryResponse>;
    abstract stringListenToEvents(key: string, listener: TEventDataReceiveFunction<string>): Promise<boolean>;
    abstract stringPublishEvents(key: string, message: string): Promise<boolean>;
    abstract jsonListenToEvents<EventData>(key: string, listener: TEventDataReceiveFunction<EventData>): Promise<boolean>;
    abstract jsonPublishEvents<EventData>(key: string, message: EventData): Promise<boolean>;
    abstract binaryListenToEvents(key: string, listener: TEventDataReceiveFunction<Buffer>): Promise<boolean>;
    abstract binaryPublishEvents(key: string, message: Buffer): Promise<boolean>;
}
