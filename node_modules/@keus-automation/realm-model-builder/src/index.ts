import * as Babel from '@babel/core';
import CommandLineParser from 'command-line-parser';
import fs from 'fs/promises';
import fg from 'fast-glob';
import chokidar from 'chokidar';
import Path from 'path';
import { BabelOptions } from './babel.config';

const params = CommandLineParser();
console.log(params);

const transformModelFile = async function(inputFile: string, outputFile: string): Promise<any> {
    console.log(inputFile, outputFile);
    let transformedOutput = await Babel.transformFileSync(inputFile, BabelOptions);

    await fs.writeFile(outputFile, transformedOutput.code);
};

const getOutputPath = function(outputDir, inputFile) {
    return `${outputDir}/${Path.parse(inputFile).name}.js`;
};

(async () => {
    console.log('this is params ', params);
    let inputPattern = params.input;
    let outputDir = params.outdir;
    let shouldWatch = params.watch;

    try {
        await fs.mkdir(outputDir, {recursive: true});
    } catch (err) {
        console.log('Error creating outdir', err);
    }

    if (shouldWatch) {
        let watcher = chokidar.watch(inputPattern, {});

        watcher.on("all", async (eventName, path) => {
            console.log(eventName, path);
            try {
                let outputPath = getOutputPath(outputDir, path);
                await transformModelFile(path, outputPath);
                console.log(`Tranformed file ${path}`);
            } catch (err) {
                console.log('Error', err);
            }
        });
    } else {
        let filesToConvert = await fg.async(inputPattern);

        for (let i = 0; i < filesToConvert.length; i++) {
            try {
                let outputPath = getOutputPath(outputDir, filesToConvert[i]);
                await transformModelFile(filesToConvert[i], outputPath);
                console.log(`Tranformed file ${filesToConvert[i]}`);
            } catch (err) {
                console.log('Error', err);
            }
        }
    }
})();