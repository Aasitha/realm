"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RealmsStore = exports.ModelsList = exports.Methods = exports.BaseSchemaVersion = exports.BaseSchemaName = void 0;
var _realm = _interopRequireDefault(require("realm"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const BaseSchemaName = "RealmsStore";
exports.BaseSchemaName = BaseSchemaName;
const BaseSchemaVersion = 2;
exports.BaseSchemaVersion = BaseSchemaVersion;
// Modified by @realm/babel-plugin
class RealmsStore extends _realm.default.Object {
}
RealmsStore.primaryKey = "realmName";
RealmsStore.schema = {
    name: "RealmsStore",
    properties: {
        realmName: {
            type: "string"
        },
        realmFolder: {
            type: "string"
        },
        realmPath: {
            type: "string"
        },
        realmModelPath: {
            type: "string"
        },
        schemaVersion: {
            type: "int"
        }
    },
    primaryKey: "realmName"
};
exports.RealmsStore = RealmsStore;
class Methods {
    static async getRealmsList(realmInst) {
        return realmInst.objects(BaseSchemaName);
    }
    static async getRealmInfo(realmInst, realmName) {
        var _a;
        return (_a = realmInst.objectForPrimaryKey(RealmsStore, realmName)) === null || _a === void 0 ? void 0 : _a.toJSON();
    }
    static updateRealmSchemaVersion(realmInst, realmName, schemaVersion) {
        return new Promise(function (resolve) {
            realmInst.write(() => {
                // Assign a newly-created instance to the variable.
                console.log(realmName, schemaVersion, RealmsStore.primaryKey);
                console.log(realmInst.objects(RealmsStore).toJSON());
                // @ts-ignore
                let realmInfo = realmInst.objectForPrimaryKey(RealmsStore, realmName);
                realmInfo.schemaVersion = schemaVersion;
                resolve({});
            });
        });
    }
    static createNewRealm(realmInst, realmInfo) {
        return new Promise(function (resolve) {
            realmInst.write(() => {
                // Assign a newly-created instance to the variable.
                console.log(realmInfo);
                let createdRealm = realmInst.create(BaseSchemaName, realmInfo);
                resolve(createdRealm);
            });
        });
    }
    static deleteRealm(realmInst, realmName) {
        return new Promise(function (resolve) {
            let realmToBeDeleted = realmInst.objectForPrimaryKey(RealmsStore, realmName);
            realmInst.write(() => {
                // Assign a newly-created instance to the variable.
                realmInst.delete(realmToBeDeleted);
                realmToBeDeleted = null;
                resolve({});
            });
        });
    }
}
exports.Methods = Methods;
const ModelsList = [RealmsStore];
exports.ModelsList = ModelsList;
//# sourceMappingURL=realms-collection.js.map