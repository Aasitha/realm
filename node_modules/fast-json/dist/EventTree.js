"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTree = void 0;
const constants_1 = require("./constants");
const Tree_1 = require("./Tree");
class EventTree {
    constructor(rootName, customPathSeparator = '') {
        this.tree = new Tree_1.Tree(rootName);
        this.customPathSeparator = customPathSeparator;
        this.expandedTree = this.tree.getCloneExpanded();
        this.node = this.expandedTree.root;
    }
    down(name) {
        var _a;
        if (name !== this.expandedTree.root.name) {
            const node = (_a = this.node.getChild(name)) !== null && _a !== void 0 ? _a : this.node.getChild(constants_1.WILDCARD);
            if (node === undefined) {
                throw new Error('Could not get child');
            }
            this.node = node;
        }
    }
    up() {
        if (this.node.parent !== undefined) {
            this.node = this.node.parent;
        }
    }
    hasNode(name) {
        if (name === this.expandedTree.root.name) {
            return true;
        }
        return (this.node.getChild(name) !== undefined ||
            this.node.getChild(constants_1.WILDCARD) !== undefined);
    }
    hasListener() {
        return this.node.hasListeners();
    }
    emit(data) {
        this.node.callListeners(data);
    }
    on(path, listener) {
        const pathArr = this.parsePath(path);
        this.tree.add(pathArr, listener);
        const nodePath = this.node.getPath();
        this.expandedTree = this.tree.getCloneExpanded();
        this.node = this.expandedTree.get(nodePath);
    }
    reset() {
        this.node = this.expandedTree.root;
    }
    parsePath(origPath) {
        if (Array.isArray(origPath)) {
            return origPath;
        }
        if (origPath.length === 0) {
            return [];
        }
        if (this.customPathSeparator) {
            return origPath.split(this.customPathSeparator);
        }
        const sep = '.';
        let path = origPath.replace(/[.[]/g, sep);
        path = path.replace(/\]/g, '');
        path = path.startsWith(sep) ? path.substring(sep.length) : path;
        return path.split(sep);
    }
}
exports.EventTree = EventTree;
