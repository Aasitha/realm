import Realm from "realm";

export const BaseSchemaName = "GroupsInfo";
export const BaseSchemaVersion = 1;

export class Appliance extends Realm.Object<Appliance> {
    applianceId: string;
    applianceType: string;

    static embedded?: boolean = true;
}
  

export class GroupsInfo extends Realm.Object<GroupsInfo, "groupId"> {
    groupId!: string;
    appliances!: Realm.Types.List<Appliance>;

    static primaryKey = "groupId";
}

export class Methods {
    static saveGroup(realmInst: Realm, groupInfo: GroupsInfo) {
        return new Promise((resolve) => {
            realmInst.write(() => {
                realmInst.create(BaseSchemaName, groupInfo);
                resolve({});
            });
        });
    }

    static deleteGroup(realmInst: Realm, groupId: string) {
        console.log(groupId);
        return new Promise(function(resolve) {
            let groupToBeDeleted = realmInst.objectForPrimaryKey(GroupsInfo, groupId);
            realmInst.write(() => {
                // Assign a newly-created instance to the variable.
                realmInst.delete(groupToBeDeleted);
                groupToBeDeleted = null;
                resolve({});
            });
        });
    }

    static async getGroupsList(realmInst: Realm) {
        console.log('this is devices list amazing');
        return realmInst.objects(BaseSchemaName).toJSON();
    }

    static async getGroupById(realmInst: Realm, groupId: string) {
        return realmInst.objectForPrimaryKey(GroupsInfo, groupId)?.toJSON();
    }
}

export const ModelsList = [ GroupsInfo, Appliance ];

export const Migrate = function() {
    
}