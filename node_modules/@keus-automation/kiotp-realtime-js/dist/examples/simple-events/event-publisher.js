"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../src/index");
const Config = __importStar(require("../config"));
const buffer_1 = require("buffer/");
function AsyncDelay(delay) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(null);
        }, delay);
    });
}
(async function () {
    let realtimeInst = new index_1.KeusRealtimeCommunication({
        host: Config.HOST,
        port: Config.PORT,
        token: Config.TOKEN
    });
    await realtimeInst.connect();
    console.log('connected');
    for (let i = 0; i < 10; i++) {
        let binaryPublishResp = await realtimeInst.binaryPublishEvents(Config.EVENTS.EVENT_NAME_BINARY, buffer_1.Buffer.from([0x50, 0x51, 0x52]));
        console.log('binary publish response', binaryPublishResp);
        await AsyncDelay(2000);
        let stringPublishResp = await realtimeInst.stringPublishEvents(Config.EVENTS.EVENT_NAME_STRING, 'this is string event data');
        console.log('string publish response', stringPublishResp);
        await AsyncDelay(2000);
        let jsonPublishResp = await realtimeInst.jsonPublishEvents(Config.EVENTS.EVENT_NAME_JSON, {
            name: 'Keus JSON Event',
            data: {}
        });
        console.log('json publish response', jsonPublishResp);
        await AsyncDelay(2000);
    }
})();
