import Realm from "realm";

export const BaseSchemaName = "RealmsStore"
export const BaseSchemaVersion = 2;

export class RealmsStore extends Realm.Object<RealmsStore, "realmName"> {
  realmName: string;
  realmFolder: string;
  realmPath: string;
  realmModelPath: string;
  schemaVersion: Realm.Types.Int;

  static primaryKey = "realmName";
}

export class Methods {
  static async getRealmsList(realmInst: Realm) {
    return realmInst.objects(BaseSchemaName);
  }

  static async getRealmInfo(realmInst: Realm, realmName: string) {
    return realmInst.objectForPrimaryKey(RealmsStore, realmName)?.toJSON();
  }

  static updateRealmSchemaVersion(realmInst: Realm, realmName: string, schemaVersion: number) {
    return new Promise(function(resolve) {
      realmInst.write(() => {
        // Assign a newly-created instance to the variable.
        console.log(realmName, schemaVersion, RealmsStore.primaryKey);
        console.log(realmInst.objects(RealmsStore).toJSON());
        // @ts-ignore
        let realmInfo: RealmsStore = realmInst.objectForPrimaryKey(RealmsStore, realmName);
        realmInfo.schemaVersion = schemaVersion;
        resolve({});
      });
    });
  }

  static createNewRealm(realmInst: Realm, realmInfo: RealmsStore) {
    return new Promise(function(resolve) {
      realmInst.write(() => {
        // Assign a newly-created instance to the variable.
        console.log(realmInfo);
        let createdRealm = realmInst.create<RealmsStore>(BaseSchemaName, realmInfo);
        resolve(createdRealm);
      });
    });
  }

  static deleteRealm(realmInst: Realm, realmName: string) {
    return new Promise(function(resolve) {
      let realmToBeDeleted = realmInst.objectForPrimaryKey(RealmsStore, realmName);
      realmInst.write(() => {
        // Assign a newly-created instance to the variable.
        realmInst.delete(realmToBeDeleted);
        realmToBeDeleted = null;
        resolve({});
      });
    });
  }
}

export const ModelsList = [ RealmsStore ];