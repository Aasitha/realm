import { KeusRealtimeCommunication } from "../../src/index"
import * as Config from '../config';
import { Buffer } from 'buffer/';

function AsyncDelay(delay: number) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(null);
        }, delay);
    });
}

(async function() {
    let realtimeInst = new KeusRealtimeCommunication({
        host: Config.HOST,
        port: Config.PORT,
        token: Config.TOKEN
    });
    await realtimeInst.connect();
    console.log('connected');

    for (let i = 0; i < 10; i++) {
        let binaryPublishResp = await realtimeInst.binaryPublishEvents(Config.EVENTS.EVENT_NAME_BINARY, Buffer.from([0x50, 0x51, 0x52]));
        console.log('binary publish response', binaryPublishResp);
        await AsyncDelay(2000);

        let stringPublishResp = await realtimeInst.stringPublishEvents(Config.EVENTS.EVENT_NAME_STRING, 'this is string event data');
        console.log('string publish response', stringPublishResp);
        await AsyncDelay(2000);

        let jsonPublishResp = await realtimeInst.jsonPublishEvents<Config.EVENTS.TestJSONEventData>(
            Config.EVENTS.EVENT_NAME_JSON, {
            name: 'Keus JSON Event',
            data: {}
        });
        console.log('json publish response', jsonPublishResp);
        await AsyncDelay(2000);
    }
})();
