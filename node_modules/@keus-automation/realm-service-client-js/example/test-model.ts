import Realm from "realm";

export const BaseSchemaName = "DevicesInfo";
export const BaseSchemaVersion = 4;

export class Button extends Realm.Object<Button> {
    id: number;
    type: string;
    action: string;

    static embedded?: boolean = true;
}

export class Appliance extends Realm.Object<Appliance> {
    applianceId: string;
    buttons: Realm.Types.List<Button>;

    static embedded?: boolean = true;
}
  

export class DevicesInfo extends Realm.Object<DevicesInfo, "deviceId"> {
    deviceId!: string;
    appliances!: Realm.Types.List<Appliance>;

    static primaryKey = "deviceId";
}

export class Methods {
    static saveDevice(realmInst: Realm, deviceInfo: DevicesInfo) {
        return new Promise((resolve) => {
            realmInst.write(() => {
                realmInst.create(BaseSchemaName, deviceInfo);
                resolve({});
            });
        });
    }

    static deleteDevice(realmInst: Realm, deviceId: string) {
        console.log(deviceId);
        return new Promise(function(resolve) {
            let deviceToBeDeleted = realmInst.objectForPrimaryKey(DevicesInfo, deviceId);
            realmInst.write(() => {
                // Assign a newly-created instance to the variable.
                realmInst.delete(deviceToBeDeleted);
                deviceToBeDeleted = null;
                resolve({});
            });
        });
    }

    static async getDevicesList(realmInst: Realm) {
        console.log('this is devices list amazing');
        return realmInst.objects(BaseSchemaName).toJSON();
    }

    static async getDeviceById(realmInst: Realm, deviceId: string) {
        return realmInst.objectForPrimaryKey(DevicesInfo, deviceId)?.toJSON();
    }
}

export const ModelsList = [ DevicesInfo, Appliance, Button ];