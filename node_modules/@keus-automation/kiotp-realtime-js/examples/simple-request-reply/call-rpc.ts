import { KeusRealtimeCommunication, ConnectionEvents } from "../../src/index";
import * as Config from '../config';
import { Buffer } from 'buffer/';

(async function() {
    let realtimeInst = new KeusRealtimeCommunication({
        host: Config.HOST,
        port: Config.PORT,
        token: Config.TOKEN,
        reconnection: {
            maxAttempts: -1
        }
    });

    realtimeInst.on(ConnectionEvents.CONNECTING, () => {
        console.log('Connecting ....');
    });

    realtimeInst.on(ConnectionEvents.RECONNECTING, () => {
        console.log('Re Connecting ....');
    });

    realtimeInst.on(ConnectionEvents.ERROR, (error) => {
        console.log('Error ....', error);
    });

    realtimeInst.on(ConnectionEvents.CONNECTED, () => {
        console.log('Connected .... Event');
    });

    await realtimeInst.connect();
    console.log('Connected');

    let binaryCallRPCResp = await realtimeInst.binaryCallRPC(Config.RPCS.RPC_NAME_BINARY, Buffer.from([0x01, 0x02, 0x03]));
    console.log('Binary Call Resp', binaryCallRPCResp);

    let jsonCallRPCResp = await realtimeInst.jsonCallRPC<Config.RPCS.TestJSONReq, Config.RPCS.TestJSONResp>(
        Config.RPCS.RPC_NAME_JSON, {
        name: 'keus',
        department: 'platform'
    });
    console.log('JSON Call Resp', jsonCallRPCResp);

    let stringCallRPCResp = await realtimeInst.stringCallRPC(
        Config.RPCS.RPC_NAME_STRING, 'this is string call rpc data');
    console.log('String Call Resp', stringCallRPCResp);
})()
