#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Babel = __importStar(require("@babel/core"));
const command_line_parser_1 = __importDefault(require("command-line-parser"));
const promises_1 = __importDefault(require("fs/promises"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const chokidar_1 = __importDefault(require("chokidar"));
const path_1 = __importDefault(require("path"));
const babel_config_1 = require("./babel.config");
const params = (0, command_line_parser_1.default)();
console.log(params);
const transformModelFile = async function (inputFile, outputFile) {
    console.log(inputFile, outputFile);
    let transformedOutput = await Babel.transformFileSync(inputFile, babel_config_1.BabelOptions);
    await promises_1.default.writeFile(outputFile, transformedOutput.code);
};
const getOutputPath = function (outputDir, inputFile) {
    return `${outputDir}/${path_1.default.parse(inputFile).name}.js`;
};
(async () => {
    console.log('this is params ', params);
    let inputPattern = params.input;
    let outputDir = params.outdir;
    let shouldWatch = params.watch;
    try {
        await promises_1.default.mkdir(outputDir, { recursive: true });
    }
    catch (err) {
        console.log('Error creating outdir', err);
    }
    if (shouldWatch) {
        let watcher = chokidar_1.default.watch(inputPattern, {});
        watcher.on("all", async (eventName, path) => {
            console.log(eventName, path);
            try {
                let outputPath = getOutputPath(outputDir, path);
                await transformModelFile(path, outputPath);
                console.log(`Tranformed file ${path}`);
            }
            catch (err) {
                console.log('Error', err);
            }
        });
    }
    else {
        let filesToConvert = await fast_glob_1.default.async(inputPattern);
        for (let i = 0; i < filesToConvert.length; i++) {
            try {
                let outputPath = getOutputPath(outputDir, filesToConvert[i]);
                await transformModelFile(filesToConvert[i], outputPath);
                console.log(`Tranformed file ${filesToConvert[i]}`);
            }
            catch (err) {
                console.log('Error', err);
            }
        }
    }
})();
//# sourceMappingURL=index.js.map