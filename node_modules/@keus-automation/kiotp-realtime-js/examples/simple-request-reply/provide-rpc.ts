import { KeusRealtimeCommunication, ConnectionEvents } from "../../src/index";
import * as Config from '../config';
import { Buffer } from 'buffer/';

function AsyncDelay(delay: number) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(null);
        }, delay);
    });
}

(async function () {
    let realtimeInst = new KeusRealtimeCommunication({
        host: Config.HOST,
        port: Config.PORT,
        token: Config.TOKEN,
        reconnection: {
            maxAttempts: -1
        }
    });
    realtimeInst.on(ConnectionEvents.CONNECTING, () => {
        console.log('Connecting ....');
    });

    realtimeInst.on(ConnectionEvents.RECONNECTING, () => {
        console.log('Re Connecting ....');
    });

    realtimeInst.on(ConnectionEvents.ERROR, (error) => {
        console.log('Error ....', error);
    });

    realtimeInst.on(ConnectionEvents.CONNECTED, () => {
        console.log('Connected .... Event');
    });
    await realtimeInst.connect();
    console.log('connected');

    let binaryRPCStatus = await realtimeInst.binaryProvideRPC(Config.RPCS.RPC_NAME_BINARY, async (methodData: any): Promise<any> => {
        console.log(methodData);

        return Buffer.from([0x01, 0x02, 0x03]);
    });

    console.log('Binary RPC Provided', binaryRPCStatus);

    let stringRPCStatus = await realtimeInst.stringProvideRPC(Config.RPCS.RPC_NAME_STRING, async (methodData) => {
        console.log(methodData);

        return 'This is test RPC data';
    });

    console.log('String RPC Provided', stringRPCStatus);

    let jsonRPCStatus = await realtimeInst.jsonProvideRPC<Config.RPCS.TestJSONReq, Config.RPCS.TestJSONResp>(
        Config.RPCS.RPC_NAME_JSON, async (methodData) => {
        console.log(methodData);
        return {
            success: true
        };
    });

    console.log('JSON RPC Provided', jsonRPCStatus);

    await AsyncDelay(12000)
})();
