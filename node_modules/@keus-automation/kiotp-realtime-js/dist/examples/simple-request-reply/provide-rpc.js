"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../src/index");
const Config = __importStar(require("../config"));
const buffer_1 = require("buffer/");
function AsyncDelay(delay) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve(null);
        }, delay);
    });
}
(async function () {
    let realtimeInst = new index_1.KeusRealtimeCommunication({
        host: Config.HOST,
        port: Config.PORT,
        token: Config.TOKEN,
        reconnection: {
            maxAttempts: -1
        }
    });
    realtimeInst.on(index_1.ConnectionEvents.CONNECTING, () => {
        console.log('Connecting ....');
    });
    realtimeInst.on(index_1.ConnectionEvents.RECONNECTING, () => {
        console.log('Re Connecting ....');
    });
    realtimeInst.on(index_1.ConnectionEvents.ERROR, (error) => {
        console.log('Error ....', error);
    });
    realtimeInst.on(index_1.ConnectionEvents.CONNECTED, () => {
        console.log('Connected .... Event');
    });
    await realtimeInst.connect();
    console.log('connected');
    let binaryRPCStatus = await realtimeInst.binaryProvideRPC(Config.RPCS.RPC_NAME_BINARY, async (methodData) => {
        console.log(methodData);
        return buffer_1.Buffer.from([0x01, 0x02, 0x03]);
    });
    console.log('Binary RPC Provided', binaryRPCStatus);
    let stringRPCStatus = await realtimeInst.stringProvideRPC(Config.RPCS.RPC_NAME_STRING, async (methodData) => {
        console.log(methodData);
        return 'This is test RPC data';
    });
    console.log('String RPC Provided', stringRPCStatus);
    let jsonRPCStatus = await realtimeInst.jsonProvideRPC(Config.RPCS.RPC_NAME_JSON, async (methodData) => {
        console.log(methodData);
        return {
            success: true
        };
    });
    console.log('JSON RPC Provided', jsonRPCStatus);
    await AsyncDelay(12000);
})();
