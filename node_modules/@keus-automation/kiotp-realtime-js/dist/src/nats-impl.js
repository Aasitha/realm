"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const realtime_interface_1 = require("./realtime-interface");
const nats_export_1 = require("./nats-export");
const nats_export_2 = require("./nats-export");
const buffer_1 = require("buffer/");
class KIOTPRealtimeCommunication extends realtime_interface_1.IKIOTPRealtimeCommunication {
    asyncDelay(delay) {
        return new Promise(function (resolve) {
            setTimeout(function () {
                resolve();
            }, delay);
        });
    }
    constructor(config) {
        super(config);
        this.token = '';
        this.tokenFlag = false;
        this.nkey = '';
        this.connection = null;
        this.sc = (0, nats_export_1.StringCodec)();
        this.jc = (0, nats_export_1.JSONCodec)();
        this.host = config.host;
        this.port = config.port;
        if (config.token) {
            this.token = config.token;
            this.tokenFlag = true;
        }
        else {
            this.nkey = (config === null || config === void 0 ? void 0 : config.nkey) || '';
        }
    }
    async attachConnectionListeners() {
        var _a, _b;
        if ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.status) {
            this.emit(realtime_interface_1.ConnectionEvents.CONNECTED);
            for await (const status of (_b = this.connection) === null || _b === void 0 ? void 0 : _b.status()) {
                switch (status.type) {
                    case nats_export_2.Events.Disconnect:
                        {
                            this.emit(realtime_interface_1.ConnectionEvents.RECONNECTING);
                        }
                        break;
                    case nats_export_2.Events.Reconnect:
                        {
                            this.emit(realtime_interface_1.ConnectionEvents.CONNECTED);
                        }
                        break;
                    case nats_export_2.Events.Error:
                        {
                            this.emit(realtime_interface_1.ConnectionEvents.ERROR, status.data);
                        }
                        break;
                    case nats_export_2.Events.Update:
                        {
                            console.log('Cluster Updated', status.data);
                        }
                        break;
                }
            }
        }
    }
    async connect() {
        try {
            if (this.tokenFlag) {
                this.connection = await (0, nats_export_1.connect)({
                    servers: `${this.host}:${this.port}`,
                    token: this.token,
                    maxReconnectAttempts: 5,
                    reconnect: true
                });
            }
            else {
                this.connection = await (0, nats_export_1.connect)({
                    servers: `${this.host}:${this.port}`,
                    authenticator: (0, nats_export_1.nkeyAuthenticator)(new TextEncoder().encode(this.nkey)),
                    maxReconnectAttempts: 5,
                    reconnect: true
                });
            }
            this.attachConnectionListeners();
        }
        catch (e) {
            console.log('from conect', e);
            await this.asyncDelay(4000);
            this.connect();
        }
        return true;
    }
    async processBinaryProvidedRPC(key, methodHandlerFunction, value) {
        for await (const items of value) {
            let data = items.data;
            methodHandlerFunction(data)
                .then(function (response) {
                items.respond(response);
            })
                .catch(function (err) {
                items.respond(buffer_1.Buffer.from(err.toString()));
            });
        }
    }
    async processJsonProvidedRPC(key, methodHandlerFunction, value) {
        for await (const items of value) {
            let data = items.data;
            let jsonData;
            try {
                jsonData = this.jc.decode(data);
            }
            catch (err) {
                console.log(err);
            }
            methodHandlerFunction(jsonData)
                .then((response) => {
                let jsonRespData = this.jc.encode(response);
                items.respond(jsonRespData);
            })
                .catch((err) => {
                items.respond(this.jc.encode({
                    success: false,
                    error: realtime_interface_1.Errors.InvalidDataFormat.getErrorCode()
                }));
            });
        }
    }
    async processStringProvidedRPC(key, methodHandlerFunction, value) {
        for await (const items of value) {
            let data = this.sc.decode(items.data);
            methodHandlerFunction(data)
                .then((response) => {
                items.respond(this.sc.encode(response));
            })
                .catch((err) => {
                items.response(this.sc.encode(err.toString()));
            });
        }
    }
    async stringProvideRPC(key, methodHandlerFunction) {
        var _a;
        try {
            let value = await ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.subscribe(key));
            if (!value) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            this.processStringProvidedRPC(key, methodHandlerFunction, value);
            return true;
        }
        catch (e) {
            console.log('from providerpc', e);
            return false;
        }
    }
    async jsonProvideRPC(key, methodHandlerFunction) {
        var _a;
        try {
            let value = await ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.subscribe(key));
            if (!value) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            this.processJsonProvidedRPC(key, methodHandlerFunction, value);
            return true;
        }
        catch (e) {
            console.log('from providerpc', e);
            return false;
        }
    }
    async binaryProvideRPC(key, methodHandlerFunction) {
        var _a;
        try {
            let value = await ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.subscribe(key));
            if (!value) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            this.processBinaryProvidedRPC(key, methodHandlerFunction, value);
            return true;
        }
        catch (e) {
            console.log('from providerpc', e);
            return false;
        }
    }
    async unsubscribe() {
        var _a;
        try {
            await ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.drain());
        }
        catch (e) {
            console.log('from unsubsribe', e);
        }
    }
    async binaryCallRPC(key, methodData) {
        var _a;
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            let msg = await ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.request(key, methodData, { timeout: 30000 }));
            return {
                success: true,
                data: buffer_1.Buffer.from(msg.data)
            };
        }
        catch (err) {
            if (err && err.code == 503) {
                return {
                    success: false,
                    error: new realtime_interface_1.Errors.RPCNotAvailable()
                };
            }
            else {
                return {
                    success: false,
                    error: err.toString()
                };
            }
        }
    }
    async jsonCallRPC(key, methodData) {
        var _a;
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            let reqData = this.jc.encode(methodData);
            let msg = await ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.request(key, reqData, { timeout: 30000 }));
            let jsonRespData = this.jc.decode(msg.data);
            return {
                success: true,
                data: jsonRespData
            };
        }
        catch (err) {
            if (err && err.code == 503) {
                return {
                    success: false,
                    error: new realtime_interface_1.Errors.RPCNotAvailable()
                };
            }
            else {
                return {
                    success: false,
                    error: err.toString()
                };
            }
        }
    }
    async stringCallRPC(key, methodData) {
        var _a;
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            let reqData = this.sc.encode(methodData);
            let msg = await ((_a = this.connection) === null || _a === void 0 ? void 0 : _a.request(key, reqData, { timeout: 30000 }));
            let stringRespData = this.sc.decode(msg.data);
            return {
                success: true,
                data: stringRespData
            };
        }
        catch (err) {
            if (err && err.code == 503) {
                return {
                    success: false,
                    error: new realtime_interface_1.Errors.RPCNotAvailable()
                };
            }
            else {
                return {
                    success: false,
                    error: err.toString()
                };
            }
        }
    }
    async emitStringEvents(value, listener) {
        for await (const items of value) {
            let eventData = this.sc.decode(items.data);
            listener(eventData);
        }
    }
    async stringListenToEvents(key, listener) {
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            const sub = await this.connection.subscribe(key);
            if (sub) {
                this.emitStringEvents(sub, listener);
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            console.log('from listen', e);
            return false;
        }
    }
    async stringPublishEvents(key, message) {
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            await this.connection.publish(key, this.sc.encode(message));
            return true;
        }
        catch (e) {
            console.log('from publish', e);
            return false;
        }
    }
    async emitJSONEvents(value, listener) {
        for await (const items of value) {
            let eventData = this.jc.decode(items.data);
            listener(eventData);
        }
    }
    async jsonListenToEvents(key, listener) {
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            const sub = await this.connection.subscribe(key);
            if (sub) {
                this.emitJSONEvents(sub, listener);
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            console.log('from listen', e);
            return false;
        }
    }
    async jsonPublishEvents(key, message) {
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            await this.connection.publish(key, this.jc.encode(message));
            return true;
        }
        catch (e) {
            console.log('from publish', e);
            return false;
        }
    }
    async emitBinaryEvents(value, listener) {
        for await (const items of value) {
            listener(buffer_1.Buffer.from(items.data));
        }
    }
    async binaryListenToEvents(key, listener) {
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            const sub = await this.connection.subscribe(key);
            if (sub) {
                this.emitBinaryEvents(sub, listener);
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            console.log('from listen', e);
            return false;
        }
    }
    async binaryPublishEvents(key, message) {
        try {
            if (!this.connection) {
                throw new realtime_interface_1.Errors.InvalidConnection();
            }
            await this.connection.publish(key, message);
            return true;
        }
        catch (e) {
            console.log('from publish', e);
            return false;
        }
    }
}
exports.default = KIOTPRealtimeCommunication;
