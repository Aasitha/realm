import { KeusRealtimeCommunication } from '@keus-automation/kiotp-realtime-js';
export declare namespace IRealmClient {
    interface IClientOptions {
        host: string;
        port: number;
        token: string;
        serverId: string;
    }
    enum IRealmAction {
        create = 1,
        delete = 2,
        update = 3
    }
    interface IRealmRequest {
        realmName: string;
        realmModel?: string;
        schemaVersion?: number;
        action: IRealmAction;
    }
    interface IRealmResponse {
        success: boolean;
        error?: any;
    }
    interface IDBRequest {
        realmName: string;
        methodName: string;
        methodData: any;
    }
    interface IDBResponse {
        success: boolean;
        data: any;
        error?: any;
    }
}
declare class RealmClient {
    _options: IRealmClient.IClientOptions;
    _realtimeInst: KeusRealtimeCommunication;
    constructor(options: IRealmClient.IClientOptions);
    getRealmRPC(): string;
    getRealmMethodRPC(): string;
    start(): Promise<void>;
    createRealm(realmName: string, schemaVersion: number, modelFilePath: string): Promise<IRealmClient.IRealmResponse>;
    updateRealm(realmName: string, schemaVersion: number, modelFilePath: string): Promise<IRealmClient.IRealmResponse>;
    deleteRealm(realmName: string): Promise<IRealmClient.IRealmResponse>;
    callModelMethod<IMethodData>(realmName: string, methodName: string, methodData: IMethodData): Promise<IRealmClient.IDBResponse>;
}
export { RealmClient };
