import Realm from 'realm';
import { RealmsStore } from './realms-collection';
import { KeusRealtimeCommunication } from '@keus-automation/kiotp-realtime-js';
export declare namespace IRealmServer {
    interface RealmServiceModel {
        BaseSchemaName: string;
        BaseSchemaVersion: number;
        Methods: any;
        ModelsList: Array<any>;
    }
    interface IServerOptions {
        storageFolder: string;
        host?: string;
        port?: number;
        token?: string;
        serverId?: string;
        disableService: boolean;
    }
    interface RealmInfo {
        realm: Realm;
        model: RealmServiceModel;
    }
    enum IRealmAction {
        create = 1,
        delete = 2,
        update = 3
    }
    interface IRealmRequest {
        realmName: string;
        realmModel?: string;
        schemaVersion: number;
        action: IRealmAction;
    }
    interface IRealmResponse {
        success: boolean;
        error?: any;
    }
    interface IDBRequest {
        realmName: string;
        methodName: string;
        methodData: any;
    }
    interface IDBResponse {
        success: boolean;
        data: any;
        error?: any;
    }
}
declare class RealmServer {
    _options: IRealmServer.IServerOptions;
    _realtimeInst: KeusRealtimeCommunication;
    _storageFolder: string;
    _realmsDb?: Realm;
    _realms: Map<string, IRealmServer.RealmInfo>;
    _serverId: string;
    constructor(options: IRealmServer.IServerOptions);
    start(): Promise<void>;
    startDbProviders(): Promise<void>;
    callModelMethod(data: IRealmServer.IDBRequest): Promise<any>;
    addLocalRealm(realmServiceModel: IRealmServer.RealmServiceModel): Promise<void>;
    createRealm(data: IRealmServer.IRealmRequest): Promise<void>;
    addRealm(realmInfo: RealmsStore): Promise<boolean>;
    updateRealm(data: IRealmServer.IRealmRequest): Promise<void>;
    deleteRealm(realmName: string): Promise<boolean>;
}
export { RealmServer };
