import { RealmClient, IRealmClient } from '../dist/index';
import * as DevicesInfo from './test-model';
import * as GroupInfo from './group-model';
import util from 'util';

(async () => {
    const realmClient = new RealmClient({
        host: 'kiotp_nats_main_server',
        port: 9765,
        token: 'keus-iot-platform',
        serverId: 'Keus-homeId'
    });

    await realmClient.start();
    console.log('Connected ');

    // let createRealmResp = await realmClient.createRealm(
    //     DevicesInfo.BaseSchemaName,
    //     DevicesInfo.BaseSchemaVersion,
    //     __dirname + '/test-model.js'
    // );
    // console.log(createRealmResp);

    // let updateRealmResp = await realmClient.updateRealm(
    //     DevicesInfo.BaseSchemaName,
    //     DevicesInfo.BaseSchemaVersion,
    //     __dirname + '/test-model.js'
    // );
    // console.log(updateRealmResp);

    // let callDeviceInfoRealm = await realmClient.callModelMethod(
    //     DevicesInfo.BaseSchemaName,
    //     DevicesInfo.Methods.getDevicesList.name,
    //     {}
    // );
    // console.log(util.inspect(callDeviceInfoRealm, false, 20, true));

    // let addDeviceInfo = await realmClient.callModelMethod(
    //     DevicesInfo.BaseSchemaName,
    //     DevicesInfo.Methods.saveDevice.name,
    //     {
    //         deviceId: 'test3',
    //         appliances: [{
    //             applianceId: 'appl1',
    //             buttons: [{
    //                 id: 1,
    //                 type: 'scene',
    //                 action: '123'
    //             }, {
    //                 id: 2,
    //                 type: 'group',
    //                 action: '456'
    //             }]
    //         }]
    //     }
    // );
    // console.log(addDeviceInfo);

    // let deleteDeviceInfo = await realmClient.callModelMethod(
    //     DevicesInfo.BaseSchemaName,
    //     DevicesInfo.Methods.deleteDevice.name,
    //     'test1'
    // );
    // console.log(deleteDeviceInfo);

    // let getDevicesInfo = await realmClient.callModelMethod(
    //     DevicesInfo.BaseSchemaName,
    //     DevicesInfo.Methods.getDevicesList.name,
    //     {}
    // );
    // console.log(getDevicesInfo?.data?.data);

    // console.time();
    // for (let i = 0; i < 500; i++) {
    //     let addGroupInfo = await realmClient.callModelMethod(
    //         GroupInfo.BaseSchemaName,
    //         GroupInfo.Methods.saveGroup.name,
    //         {
    //             groupId: `group-${i}`,
    //             appliances: [{
    //                 applianceId: `appl-${i}`,
    //                 applianceType: 'remote'
    //             },{
    //                 applianceId: `appl-2-${i}`,
    //                 applianceType: 'onoff'
    //             }]
    //         }
    //     );

    //     if (i%1000 === 0) {
    //         console.log(addGroupInfo, 'added group', i);
    //     }
    // }
    // let endtime = console.timeEnd();
    // console.log('Added 500 groups', endtime);

    console.log(process.memoryUsage());
    console.time();
    let getGroupInfo = await realmClient.callModelMethod(
        GroupInfo.BaseSchemaName,
        GroupInfo.Methods.getGroupsList.name,
        {}
    );
    let endtime = console.timeEnd();
    console.log(getGroupInfo.success, endtime, process.memoryUsage());
})();